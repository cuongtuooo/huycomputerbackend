import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Product, ProductDocument } from 'src/products/schemas/products.schemas';
import { Order, OrderDocument } from 'src/order/schemas/order.schema';
import { Dashboard, DashboardDocument } from './schemas/dashboard.schemas';
import { Category, CategoryDocument } from 'src/category/schemas/category.schema';

@Injectable()
export class DashboardService {
  constructor(
    @InjectModel(Product.name) private productModel: Model<ProductDocument>,
    @InjectModel(Order.name) private orderModel: Model<OrderDocument>,
    @InjectModel(Dashboard.name) private dashboardModel: Model<DashboardDocument>,
    @InjectModel(Category.name) private categoryModel: Model<CategoryDocument>,
  ) { }

  /**
   * üìä T·∫°o th·ªëng k√™ Dashboard t·ªïng quan:
   *  - T·ªïng s·∫£n ph·∫©m
   *  - T·ªïng ƒë∆°n h√†ng
   *  - T·ªïng doanh thu
   *  - T·ªïng danh m·ª•c
   *  - Th·ªëng k√™ danh m·ª•c s·∫£n ph·∫©m
   *  - ƒê∆°n h√†ng g·∫ßn ƒë√¢y
   *  - S·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng
   *  - S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
   */
  async createDailyStats() {
    // 1Ô∏è‚É£ T·ªïng s·∫£n ph·∫©m
    const totalProducts = await this.productModel.countDocuments({
      $or: [{ isDeleted: false }, { isDeleted: null }],
    });

    // 2Ô∏è‚É£ T·ªïng ƒë∆°n h√†ng
    const totalOrders = await this.orderModel.countDocuments({
      $or: [{ isDeleted: false }, { isDeleted: null }],
    });

    // 3Ô∏è‚É£ T·ªïng doanh thu
    const orders = await this.orderModel.find({ isDeleted: { $ne: true } }).select('totalPrice');
    const totalRevenue = orders.reduce((sum, o) => sum + (o.totalPrice || 0), 0);

    // 4Ô∏è‚É£ T·ªïng danh m·ª•c
    const totalCategories = await this.categoryModel.countDocuments({
      $or: [{ isDeleted: false }, { isDeleted: null }],
    });

    // 5Ô∏è‚É£ Th·ªëng k√™ t·ª´ng danh m·ª•c + s·ªë s·∫£n ph·∫©m trong danh m·ª•c
    const categoriesStats = await this.productModel.aggregate([
      { $match: { $or: [{ isDeleted: false }, { isDeleted: null }] } },
      {
        $group: {
          _id: '$category',
          productCount: { $sum: 1 },
        },
      },
      {
        $lookup: {
          from: 'categories', // t√™n collection
          localField: '_id',
          foreignField: '_id',
          as: 'categoryInfo',
        },
      },
      { $unwind: '$categoryInfo' },
      {
        $project: {
          _id: 0,
          categoryId: '$categoryInfo._id',
          categoryName: '$categoryInfo.name',
          productCount: 1,
        },
      },
      { $sort: { productCount: -1 } },
    ]);

    // 6Ô∏è‚É£ ƒê∆°n h√†ng g·∫ßn ƒë√¢y
    const recentOrders = await this.orderModel
      .find({ isDeleted: { $ne: true } })
      .sort({ createdAt: -1 })
      .limit(5)
      .select('_id name totalPrice status createdBy createdAt')
      .lean();

    // 7Ô∏è‚É£ S·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng
    const lowStockProducts = await this.productModel
      .find({
        $or: [{ isDeleted: false }, { isDeleted: null }],
        quantity: { $lt: 5 },
      })
      .limit(5)
      .select('name price quantity category')
      .populate('category', 'name')
      .lean();

    // 8Ô∏è‚É£ S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
    const topSellingProducts = await this.productModel
      .find({
        $or: [{ isDeleted: false }, { isDeleted: null }],
      })
      .sort({ sold: -1 }) // s·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng b√°n gi·∫£m d·∫ßn
      .limit(5)
      .select('name price sold quantity category')
      .populate('category', 'name')
      .lean();

    // 9Ô∏è‚É£ L∆∞u snapshot c∆° b·∫£n
    await this.dashboardModel.create({
      date: new Date(),
      totalProducts,
      totalOrders,
      totalRevenue,
      totalCategories,
    });

    // üîü Tr·∫£ d·ªØ li·ªáu cho frontend
    return {
      totalProducts,
      totalOrders,
      totalRevenue,
      totalCategories,
      categoriesStats,
      recentOrders,
      lowStockProducts,
      topSellingProducts,
    };
  }

  /**
   * GET /dashboard
   * M·ªói l·∫ßn g·ªçi s·∫Ω t·ª± ƒë·ªông t·∫°o th·ªëng k√™ m·ªõi nh·∫•t
   */
  async findAll(query?: { lowStock?: string; limit?: string }) {
    return this.createDailyStats();
  }
}
